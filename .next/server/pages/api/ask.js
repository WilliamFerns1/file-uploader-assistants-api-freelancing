"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ask";
exports.ids = ["pages/api/ask"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fask&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fask.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fask&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fask.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_ask_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/ask.js */ \"(api)/./pages/api/ask.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_ask_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_ask_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_ask_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_ask_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/ask\",\n        pathname: \"/api/ask\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_ask_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmFzayZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTJGYXBpJTJGYXNrLmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQytDO0FBQy9DO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyw4Q0FBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsOENBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELHFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktbmV4dC1hcHAvPzk2ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9hc2suanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hc2tcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hc2tcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fask&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fask.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/ask.js":
/*!**************************!*\
  !*** ./pages/api/ask.js ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__, axios__WEBPACK_IMPORTED_MODULE_1__]);\n([openai__WEBPACK_IMPORTED_MODULE_0__, axios__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nconst openaiAPIKey = process.env.OPENAI_KEY;\nconst openaiModel = process.env.OPENAI_MODEL;\nconsole.log(openaiAPIKey);\nconsole.log(openaiModel);\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: openaiAPIKey\n});\nconst documentQuestionAssistantID = \"asst_K5SzoP1rWSMLS30aIFow9bsX\";\nasync function getDocumentTextFromLink(link) {\n    // Create assistant to get inner content from document. Already created the assistant\n    const instructions = `You are a really good assistant, ready to get the inner content from the document link provided to you. You summarize it in a shorter, digestible way, while still keeping in all necessary details.`;\n    const assistant = await openai.beta.assistants.create({\n        name: \"Document Inner Content Assistant\",\n        instructions: instructions,\n        model: openaiModel || \"gpt-4-turbo\",\n        tools: [\n            {\n                type: \"file_search\"\n            }\n        ]\n    });\n    const assistantId = assistant.id;\n    // Download the file URL and save it with the file name\n    const fileName = link.split(\"/\").pop();\n    const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(link, {\n        responseType: \"arraybuffer\"\n    });\n    const buffer = Buffer.from(response.data);\n    fs__WEBPACK_IMPORTED_MODULE_2___default().writeFileSync(fileName, buffer);\n    console.log(`File \"${fileName}\" downloaded successfully.`);\n    //creating a vector store:\n    const fileStreams = [\n        \"filename\"\n    ].map((path)=>fs__WEBPACK_IMPORTED_MODULE_2___default().createReadStream(path));\n    // Create a vector store including our two files.\n    let vectorStore = await openai.beta.vectorStores.create({\n        name: fileName.split(\".\")[0]\n    });\n    // await openai.beta.vectorStores.fileBatches.uploadAndPoll(vectorStore.id, fileStreams)\n    //\n    // await openai.beta.assistants.update(assistant.id, {\n    //   tool_resources: { file_search: { vector_store_ids: [vectorStore.id] } },\n    // });\n    // A user wants to attach a file to a specific message, let's upload it.\n    const file = await openai.files.create({\n        file: fs__WEBPACK_IMPORTED_MODULE_2___default().createReadStream(fileName),\n        purpose: \"assistants\"\n    });\n    const thread = await openai.beta.threads.create({\n        messages: [\n            {\n                role: \"user\",\n                content: \"Summarize this in a digestable, and well informed way, making it shorter while still having all the necessary details.\",\n                // Attach the new file to the message.\n                attachments: [\n                    {\n                        file_id: file.id,\n                        tools: [\n                            {\n                                type: \"file_search\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    });\n    // The thread now has a vector store in its tool resources.\n    console.log(thread.tool_resources?.file_search);\n    const run = await openai.beta.threads.runs.createAndPoll(thread.id, {\n        assistant_id: assistant.id\n    });\n    const messages = await openai.beta.threads.messages.list(thread.id, {\n        run_id: run.id\n    });\n    const message = messages.data.pop();\n    if (message.content[0].type === \"text\") {\n        const { text } = message.content[0];\n        const { annotations } = text;\n        const citations = [];\n        let index = 0;\n        for (let annotation of annotations){\n            text.value = text.value.replace(annotation.text, \"[\" + index + \"]\");\n            const { file_citation } = annotation;\n            if (file_citation) {\n                const citedFile = await openai.files.retrieve(file_citation.file_id);\n                citations.push(\"[\" + index + \"]\" + citedFile.filename);\n            }\n            index++;\n        }\n        console.log(text.value);\n        console.log(citations.join(\"\\n\"));\n        // Delete the file after use\n        fs__WEBPACK_IMPORTED_MODULE_2___default().unlinkSync(fileName);\n        console.log(`File \"${fileName}\" deleted successfully.`);\n        return text.value;\n    }\n}\nasync function handler(req, res) {\n    if (req.method === \"POST\") {\n        try {\n            // Parse the request body\n            const body = JSON.parse(req.body);\n            const linkOrText = body.linkOrText;\n            const question = body.question;\n            console.log(\"Link or Text: \", linkOrText);\n            console.log(\"Question: \", question);\n            // creating assistant (I already created it)\n            // const instructions = `You are a really good assistant, ready to answer the question based off of the question and document link or text provided to you. If the user provides a link, you call the \"getDocumentTextFromLink\" from your arsenal, to get the returning text from the document, and answer the user's question.`;\n            // const assistant = await openai.beta.assistants.create({\n            //   name: \"Document Question Assistant\",\n            //   instructions: instructions,\n            //   tools: [\n            //     {\n            //       type: \"function\",\n            //       function: {\n            //         name: \"getDocumentTextFromLink\",\n            //         description: \"Get the text string as a return from a document by only providing a link\",\n            //         parameters: {\n            //           type: \"object\",\n            //           properties: {\n            //             link: {\n            //               type: \"string\",\n            //               description: \"The full link of the document.\",\n            //             },\n            //           },\n            //           required: [\"link\"],\n            //         },\n            //       },\n            //     },\n            //   ],\n            //   model: openaiModel || \"gpt-4-turbo\"\n            // });\n            const thread = await openai.beta.threads.create();\n            let userMessage;\n            if (linkOrText.includes(\"http\")) {\n                userMessage = `My question: ${question}. Here is the document I want to ask the question about: ${linkOrText}`;\n            } else {\n                userMessage = `My question: ${question}. The question is about this: ${linkOrText}`;\n            }\n            const message = await openai.beta.threads.messages.create(thread.id, {\n                role: \"user\",\n                content: userMessage\n            });\n            let run = await openai.beta.threads.runs.create(thread.id, {\n                assistant_id: documentQuestionAssistantID,\n                instructions: \"Please answer the user question based off of the link or text provided. If the user provided a link, call the 'getdocumentTextFromLink' function to get the text from the document. Answer the users question to the best of your ability, and provide a detailed response that will satisfies the users question.\"\n            });\n            while(true){\n                await delay(2500); // Delay for 5 seconds\n                const runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);\n                if (runStatus.status === \"completed\") {\n                    console.log(\"Completed\");\n                    const messages = await openai.beta.threads.messages.list(thread.id);\n                    for (const message of messages.data){\n                        const messageStr = message.content[0].text.value;\n                        console.log(`${message.role} > ${messageStr}`);\n                        return res.status(200).json({\n                            message: messageStr\n                        });\n                    }\n                    break; // Exit the loop once completed\n                } else if (runStatus.status === \"requires_action\") {\n                    console.log(\"Requires action\");\n                    const requiredActions = runStatus.required_action.submit_tool_outputs;\n                    console.log(requiredActions);\n                    const toolsOutput = [];\n                    for(let i = 0; i < requiredActions[\"tool_calls\"].length; i++){\n                        const action = requiredActions[\"tool_calls\"][i];\n                        const functionName = action[\"function\"][\"name\"];\n                        const args = JSON.parse(action[\"function\"][\"arguments\"]);\n                        console.log(\"action\", action);\n                        console.log(\"functionName\", functionName);\n                        console.log(\"args\", args);\n                        if (functionName == \"getDocumentTextFromLink\") {\n                            console.log(\"Function found\");\n                            console.log(\"Link arg: \", args.link);\n                            const output = await getDocumentTextFromLink(args.link);\n                            console.log(\"Output: \", output);\n                            toolsOutput.push({\n                                \"tool_call_id\": action[\"id\"],\n                                \"output\": output\n                            });\n                        } else {\n                            console.log(\"Function not found\");\n                        }\n                    }\n                    // Submit tools outputs back to the Assistants API \n                    console.log(\"Submitting tool outputs...\");\n                    run = await openai.beta.threads.runs.submitToolOutputsAndPoll(thread.id, run.id, {\n                        tool_outputs: toolsOutput\n                    });\n                    console.log(\"Tool outputs submitted\");\n                } else {\n                    console.log(\"Waiting for the Assistant to process...\");\n                    console.log(runStatus.status);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error processing request:\", error);\n            res.status(500).json({\n                error: \"Error processing request\"\n            });\n        }\n    } else {\n        res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n}\n// Function to create a delay using a promise\nfunction delay(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/ask.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fask&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fask.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();